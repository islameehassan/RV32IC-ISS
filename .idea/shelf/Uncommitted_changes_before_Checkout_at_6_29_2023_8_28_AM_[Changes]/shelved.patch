Index: include/registerfile.h
===================================================================
diff --git a/include/registerfile.h b/include/registerfile.h
--- a/include/registerfile.h	
+++ b/include/registerfile.h	
@@ -1,0 +1,38 @@
+#include <cstdint>
+#include <iostream>
+
+#ifndef RV32IC_ISS_REGISTERFILE_H
+#define RV32IC_ISS_REGISTERFILE_H
+
+using std::string;
+/*
+* Handles read and write to registers in the simulated CPU
+*/
+
+// mnemonic names for the 32 registers
+static const string regnames[] = {
+        "zero", "ra", "sp", "gp", "tp", "t0", "t1", "t2",
+        "s0", "s1", "a0", "a1", "a2", "a3", "a4", "a5",
+        "a6", "a7", "s2", "s3", "s4", "s5", "s6", "s7",
+        "s8", "s9", "s10", "s11", "t3", "t4", "t5", "t6"
+};
+
+class RegisterFile{
+    // Register File
+    int32_t regfile[32];
+
+public:
+    // initializes x0 with 0, and the rest with 0x1 (dummy value)
+    RegisterFile();
+
+    // set register "r" with value "value"
+    int set(int r, int32_t value);
+
+    // get the value stored in register "r"
+    int32_t get(int r);
+
+    // get the mnemonic name for register "r"
+    string getMnemonic(int r);
+};
+
+#endif //RV32IC_ISS_REGISTERFILE_H
\ No newline at end of file
Index: include/memory.h
===================================================================
diff --git a/include/memory.h b/include/memory.h
--- a/include/memory.h	
+++ b/include/memory.h	
@@ -1,0 +1,39 @@
+#ifndef RV32IC_ISS_MEMORY_H
+#define RV32IC_ISS_MEMORY_H
+
+#include <iostream>
+#include <cstdint>
+
+// Memory is byte addressable
+class Memory{
+
+    // text section array assumed to start at 0x00000000 and has size = 64Kbytes
+    // data section array assumed to start at 0x00010000 and has size = 16Kbytes
+    uint8_t memory_array [81920];
+
+public:
+    // initializes memory with 0x0
+    Memory();
+    // read byte in memory starting in location
+    uint8_t read_byte (int location);
+
+    // read half word in memory starting from location
+    uint16_t read_half_word (int location);
+
+    // read word in memory starting from location
+    uint32_t read_word (int location);
+
+    // store byte in memory starting in location
+    int store_byte (int location,uint8_t byte);
+
+    // store half word in memory starting from location
+    int store_half_word (int location,uint16_t half_word);
+
+    // store word in memory starting from location
+    int store_word (int location,uint32_t word);
+
+    // load .text section into memory where it should have all instructions
+    int load_text_section(std::string machine_code_fname);
+};
+
+#endif //RV32IC_ISS_MEMORY_H
\ No newline at end of file
