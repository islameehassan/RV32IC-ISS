Index: main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <iostream>\r\n\r\nusing std::cout;\r\nusing std::cin;\r\n\r\nint main(){\r\n    cout << \"Hello, RISC-V\";\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.cpp b/main.cpp
--- a/main.cpp	
+++ b/main.cpp	
@@ -1,8 +1,78 @@
 #include <iostream>
-
+#include "disassembler.h"
 using std::cout;
 using std::cin;
+#include <fstream>
+
+enum reg{
+    Zero,
+    sp,
+    gp,
+    tp,
+    s0
+};
 
 int main(){
-    cout << "Hello, RISC-V";
+    reg r = reg::Zero;
+    // << r << '\n';
+    // uint8_t d1=0x01;
+    // uint8_t d2=0x02;
+    uint32_t  instruction = 0xff5ff06f;
+    int32_t imm_i = (instruction & 0xFFFF00000) >> 20;
+    if (instruction & 0x80000000) // sign extend
+        imm_i |= 0xFFFFF000;
+    int32_t imm_s = (int32_t)(instruction & 0xFFF00000) >> 20;
+    imm_s |= (int32_t)(instruction & 0x00000F80) >> 7;
+    imm_s = (instruction & 0xFFFFF000);
+    int32_t imm_b = (int32_t)(instruction & 0x80000000) >> 19;
+    imm_b |= (int32_t)(instruction & 0x00000080) << 4;
+    imm_b |= (int32_t)(instruction & 0x7E000000) >> 20;
+    imm_b |= (int32_t)(instruction & 0x00000F00) >> 7;
+    int32_t imm_j = (int32_t)(instruction & 0x80000000) >> 11; // move bit 31 to 20
+    imm_j |= (int32_t)(instruction & 0x7FE00000) >> 20;        // move bit 30 : 21 to 10 : 1
+    imm_j |= (int32_t)(instruction & 0x00100000) >> 9;         // move bit 20 : 11
+    imm_j |= (int32_t)(instruction & 0x000FF000);               // extract bits 19 : 12
+    cout<<"";
+    /*Memory mem;
+    mem.store_half_word(81917,0x0FFD);
+    std::ifstream inputFile("C:\\RV32IC-ISS\\test.txt", std::ios::binary);
+    char temp;
+    int counter = 0;
+    std::ifstream infile("C:\\RV32IC-ISS\\test.txt", std::ios::in | std::ios::binary);
+    //checks if file exists or can be opened
+    if (!infile)
+    {
+        std::cout << "Can't open file " << "fname" << " for reading" << std::endl;
+    }
+    //reads in bit by bit
+    while (infile.get(temp))
+    {
+        cout<<temp<<"\n";
+    }
+    /*
+    std::ifstream is ("C:\\RV32IC-ISS\\test.txt", std::ifstream::binary);
+    if (is) {
+        // get length of file:
+        is.seekg (0, is.end);
+        int length = is.tellg();
+        is.seekg (0, is.beg);
+
+        char * buffer = new char [length];
+
+        std::cout << "Reading " << length << " characters... ";
+        // read data as a block:
+        is.read (buffer,length);
+
+        if (is)
+            std::cout << "all characters read successfully.";
+        else
+            std::cout << "error: only " << is.gcount() << " could be read";
+        is.close();
+
+        // ...buffer contains the entire file...
+
+        delete[] buffer;
+    }
+    */
+
 }
\ No newline at end of file
Index: lib/memory.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n* Handles write and read to the simulated memory\r\n*/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/memory.cpp b/lib/memory.cpp
--- a/lib/memory.cpp	
+++ b/lib/memory.cpp	
@@ -1,3 +1,113 @@
 /*
 * Handles write and read to the simulated memory
-*/
\ No newline at end of file
+*/
+
+#include "memory.h"
+#include "cstring"
+#include <stdexcept>
+
+
+Memory::Memory() {
+    // Initialize memory with 0x0
+    memset(memory_array,0,81920);
+}
+
+uint8_t Memory::read_byte(int location) {
+    // undefined access to memory
+    try{
+    if(location < 0x00000000 || location >= 0x00014000)
+        throw std::out_of_range("memory accessing out of range");
+    } catch (const std::out_of_range& e) {
+        std::cout << "Exception caught: " << e.what() << std::endl;
+    }
+    // return byte at location
+    return memory_array[location];
+}
+
+uint16_t Memory::read_half_word(int location) {
+    // undefined access to memory
+    try{
+        if(location < 0x00000000 || location >= 0x00014000)
+            throw std::out_of_range("memory accessing out of range");
+    } catch (const std::out_of_range& e) {
+        std::cout << "Exception caught: " << e.what() << std::endl;
+    }
+    try{
+        if(location>=0x00013FFF)
+            throw std::overflow_error("memory overflow");
+    } catch (const std::overflow_error &o) {
+        std::cout << "Exception caught: " << o.what() << std::endl;
+    }
+    // return half word starting from location
+    return (256U*memory_array[location])+memory_array[location+1];
+}
+
+uint32_t Memory::read_word(int location) {
+    // undefined access to memory
+    try{
+        if(location < 0x00000000 || location >= 0x00014000)
+            throw std::out_of_range("memory accessing out of range");
+    } catch (const std::out_of_range& e) {
+        std::cout << "Exception caught: " << e.what() << std::endl;
+    }
+    try{
+        if(location>=0x00013FFD)
+            throw std::overflow_error("memory overflow");
+    } catch (const std::overflow_error &o) {
+        std::cout << "Exception caught: " << o.what() << std::endl;
+    }
+    // return word starting from location
+    return (16777216U*memory_array[location])+(65536U*memory_array[location+1])
+           +(256U*memory_array[location+2])+memory_array[location+3];
+}
+
+int Memory::store_byte(int location, uint8_t byte) {
+    // undefined access to memory
+    try{
+        if(location < 0x00000000 || location >= 0x00014000)
+            throw std::out_of_range("memory accessing out of range");
+    } catch (const std::out_of_range& e) {
+        std::cout << "Exception caught: " << e.what() << std::endl;
+    }
+    // store byte in location
+    memory_array[location] = byte;
+    return 0;
+}
+
+int Memory::store_half_word(int location, uint16_t half_word) {
+    // undefined access to memory
+    try{
+        if(location>=0x00013FFF)
+            throw std::overflow_error("memory overflow");
+    } catch (const std::overflow_error &o) {
+        std::cout << "Exception caught: " << o.what() << std::endl;
+    }
+    // store half word starting from location
+    store_byte(location, 0x00FF & half_word);
+    store_byte(location+1, 0xFF00 & half_word);
+    return 0;
+}
+
+int Memory::store_word(int location, uint32_t word) {
+    // undefined access to memory
+    try{
+        if(location>=0x00013FFD)
+            throw std::overflow_error("memory overflow");
+    } catch (const std::overflow_error &o) {
+        std::cout << "Exception caught: " << o.what() << std::endl;
+    }
+    // storing word starting from location
+    store_byte(location,0x000000FF & word);
+    store_byte(location+1,0x0000FF00 & word);
+    store_byte(location+2,0x00FF0000 & word);
+    store_byte(location+3,0xFF000000 & word);
+    return 0;
+}
+
+int Memory::load_text_section(std::string) {
+    // read instructions from file and put them into memory text section;
+    return 0;
+}
+
+
+
Index: lib/registerfile.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n* Handles read and write to registers in the simulated CPU\r\n*/
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/registerfile.cpp b/lib/registerfile.cpp
--- a/lib/registerfile.cpp	
+++ b/lib/registerfile.cpp	
@@ -1,3 +1,38 @@
-/*
-* Handles read and write to registers in the simulated CPU
-*/
\ No newline at end of file
+#include "registerfile.h"
+
+RegisterFile::RegisterFile(){
+    // set x0 to zero
+    regfile[0] = 0x0;
+
+    // set the rest to 1
+    for (int i = 1; i < 32; i++){
+        regfile[i] = 0x1;
+    }
+}
+
+int RegisterFile::set(int r, int32_t value){
+    // out of bound
+    if(r == 0)
+        return 0;
+    else if(r < 1 || r >= 32)
+        return -1;
+
+    this->regfile[r] = value;
+    return 1;   // successful
+}
+
+int32_t RegisterFile::get(int r){
+    // out of bound
+    if(r < 1 || r > 31)
+        return -1;
+
+    return regfile[r];
+}
+
+string RegisterFile::getMnemonic(int r){
+    // out of bound
+    if(r < 1 || r > 31)
+        return "invalid";
+
+    return regnames[r];
+}
\ No newline at end of file
Index: include/disassembler.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/include/disassembler.h b/include/disassembler.h
new file mode 100644
--- /dev/null	
+++ b/include/disassembler.h	
@@ -0,0 +1,37 @@
+#ifndef RV32IC_ISS_DISASSEMBLER_H
+#define RV32IC_ISS_DISASSEMBLER_H
+#include "registerfile.h"
+#include "memory.h"
+#include <fstream>
+
+class disassembler {
+    Memory mem;
+    RegisterFile register_file;
+
+    int PC;
+
+    uint32_t get_opcode(uint32_t instruction);
+    uint32_t get_rd(uint32_t instruction);
+    uint32_t get_rs1(uint32_t instruction);
+    uint32_t get_rs2(uint32_t instruction);
+    uint32_t get_func7(uint32_t instruction);
+    uint32_t get_func3(uint32_t instruction);
+    uint32_t decode_compressed_intstruction(uint16_t cinstruction);
+
+    int32_t  get_imm_itype(uint32_t instruction);
+    int32_t  get_imm_stype(uint32_t instruction);
+    int32_t  get_imm_btype(uint32_t instruction);
+    int32_t  get_imm_utype(uint32_t instruction);
+    int32_t  get_imm_jtype(uint32_t instruction);
+
+    void execute(uint32_t instruction);
+
+public:
+    //
+    disassembler (const std::string& machine_code_fname);
+    void run();
+
+
+};
+
+#endif //RV32IC_ISS_DISASSEMBLER_H
